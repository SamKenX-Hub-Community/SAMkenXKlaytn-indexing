apiVersion: apps/v1
kind: Deployment
metadata:
  name: ipfs-{{ .Values.node.name }}
  labels:
    app.kubernetes.io/instance: ipfs-{{ .Values.node.name }}
    app.kubernetes.io/name: ipfs-{{ .Values.node.name }}
    app.kubernetes.io/part-of: graph-indexer
    app.kubernetes.io/version: {{ .Values.image.tag }}
    {{- if .Values.labels }}
{{ toYaml .Values.labels | indent 4 }}
    {{- end }}
spec:
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/instance: ipfs-{{ .Values.node.name }}
      app.kubernetes.io/name: ipfs-{{ .Values.node.name }}
      app.kubernetes.io/part-of: graph-indexer
  replicas: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: ipfs-{{ .Values.node.name }}
        app.kubernetes.io/name: ipfs-{{ .Values.node.name }}
        app.kubernetes.io/part-of: graph-indexer
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: "/metrics"
        prometheus.io/port: "8040"
    spec:  
      containers:
        # Proxy that forwards HTTP requests to port 8000 and
        # WebSocket requests to port 8001
        - name: ipfs
          image: ipfs/go-ipfs:v0.4.23
          ports:
            - containerPort: 5001
          volumeMounts:
            - mountPath: /data/ipfs
              name: ipfs-volume
        # The query node itself
      volumes:
        - name: ipfs-volume
        {{- if .Values.persistence.enabled }}
          persistentVolumeClaim:
            claimName: ifps-{{ .Values.node.name }}-pvc
        {{- else }}
          emptyDir: {}
        {{- end }}
      hostNetwork: false
      dnsPolicy: "ClusterFirst"
      {{- if .Values.tolerations }}
      tolerations:
{{ toYaml .Values.tolerations | indent 8 }}
      {{- end }}
